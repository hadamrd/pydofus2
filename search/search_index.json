{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"events/character/CharacterCreationresult/","title":"CharacterCreationResult Event","text":""},{"location":"events/character/CharacterCreationresult/#description","title":"Description","text":"<p>Triggered after a character creation attempt, conveying the result.</p>"},{"location":"events/character/CharacterCreationresult/#parameters","title":"Parameters","text":"<ul> <li><code>result</code>: The result of the character creation attempt (<code>True</code> for success, <code>False</code> for failure).</li> <li><code>reason</code>: Reason for failure, if applicable.</li> <li><code>error_text</code>: Additional error text providing more context on the failure.</li> </ul>"},{"location":"events/character/CharacterCreationresult/#example-usage","title":"Example Usage","text":"<pre><code>def on_character_creation_result(event, result, reason, error_text):\n    if result:\n        print(\"Character created successfully.\")\n    else:\n        print(f\"Character creation failed: {reason} - {error_text}\")\n\nKernelEventsManager().on(KernelEvent.CharacterCreationResult, on_character_creation_result)\n</code></pre>"},{"location":"events/character/CharacterNameSuggestion/","title":"CharacterNameSuggestion Event","text":""},{"location":"events/character/CharacterNameSuggestion/#description","title":"Description","text":"<p>Fired when a character name suggestion is made.</p>"},{"location":"events/character/CharacterNameSuggestion/#parameters","title":"Parameters","text":"<ul> <li><code>suggestion</code>: The suggested name.</li> </ul>"},{"location":"events/character/CharacterNameSuggestion/#example-usage","title":"Example Usage","text":"<pre><code>def on_character_name_suggestion(event, suggestion):\n    print(f\"Suggested character name: {suggestion}\")\n\nKernelEventsManager().on(KernelEvent.CharacterNameSuggestion, on_character_name_suggestion)\n</code></pre>"},{"location":"events/character/CharacterNameSuggestionFailed/","title":"CharacterNameSuggestionFailed Event","text":""},{"location":"events/character/CharacterNameSuggestionFailed/#description","title":"Description","text":"<p>This event occurs when an attempt to suggest a character name fails, typically sent with no parameters.</p>"},{"location":"events/character/CharacterNameSuggestionFailed/#example-usage","title":"Example Usage","text":"<pre><code>def on_character_name_suggestion_failed(event):\n    print(\"Character name suggestion failed.\")\n\nKernelEventsManager().on(KernelEvent.CharacterNameSuggestionFailed, on_character_name_suggestion_failed)\n</code></pre>"},{"location":"events/client/ClientCrashed/","title":"ClientCrashed Event","text":""},{"location":"events/client/ClientCrashed/#description","title":"Description","text":"<p>This event is triggered when the client crashes.</p>"},{"location":"events/client/ClientCrashed/#parameters","title":"Parameters","text":"<ul> <li><code>message</code>: A descriptive message about the cause of the crash.</li> </ul>"},{"location":"events/client/ClientCrashed/#example-usage","title":"Example Usage","text":"<pre><code>def on_client_crashed(message):\n    print(f\"Client crashed due to: {message}\")\n\nKernelEventsManager().on(KernelEvent.ClientCrashed, on_client_crashed)\n</code></pre>"},{"location":"events/client/ClientRestart/","title":"ClientRestart Event","text":""},{"location":"events/client/ClientRestart/#description","title":"Description","text":"<p>This event is triggered when the client restarts, typically due to a follow transition failure.</p>"},{"location":"events/client/ClientRestart/#parameters","title":"Parameters","text":"<ul> <li><code>reason</code>: The reason for the client's restart.</li> </ul>"},{"location":"events/client/ClientRestart/#example-usage","title":"Example Usage","text":"<pre><code>def on_client_restart(reason):\n    print(f\"Client restart due to: {reason}\")\n\nKernelEventsManager().on(KernelEvent.ClientRestart, on_client_restart)\n</code></pre>"},{"location":"events/client/ClientShutdown/","title":"ClientShutdown Event","text":""},{"location":"events/client/ClientShutdown/#description","title":"Description","text":"<p>Triggered when the client shuts down, usually because of an error while attempting to auto-revive a player.</p>"},{"location":"events/client/ClientShutdown/#parameters","title":"Parameters","text":"<ul> <li><code>error</code>: A description of the error that caused the shutdown.</li> </ul>"},{"location":"events/client/ClientShutdown/#example-usage","title":"Example Usage","text":"<pre><code>def on_client_shutdown(event, error):\n    print(f\"Client shutdown due to: {error}\")\n\nKernelEventsManager().on(KernelEvent.ClientShutdown, on_client_shutdown)\n</code></pre>"},{"location":"events/connection/CharacterSelectionSuccess/","title":"CharacterSelectionSuccess Event","text":""},{"location":"events/connection/CharacterSelectionSuccess/#description","title":"Description","text":"<p>This event is triggered when a character selection process is completed successfully. It signifies that the player has chosen a character with which to play, and the game client can proceed with loading the character's game session. This event is essential for initializing the game state for the selected character and preparing any necessary game environments or data specific to them.</p>"},{"location":"events/connection/CharacterSelectionSuccess/#parameters","title":"Parameters","text":"<ul> <li> <p><code>characterBaseInformations</code>: An object containing base information about the character that has been successfully selected. The object includes:</p> </li> <li> <p><code>sex</code>: A boolean indicating the character's sex.</p> </li> <li><code>entityLook</code>: An <code>EntityLook</code> object describing the character's appearance.</li> <li><code>breed</code>: An integer representing the character's breed.</li> <li><code>level</code>: An integer indicating the character's level.</li> <li><code>name</code>: A string containing the character's name.</li> <li><code>id</code>: An integer that serves as the unique identifier for the character.</li> </ul>"},{"location":"events/connection/CharacterSelectionSuccess/#example-usage","title":"Example Usage","text":"<pre><code>def on_character_selected_successfully(event, cbi):\n    print(f\"Character selected: {cbi.name} (ID: {cbi.id})\")\n    # Further logic to initialize the character's game session\n\nKernelEventsManager().on(KernelEvent.CharacterSelectionSuccess, on_character_selected_successfully)\n</code></pre>"},{"location":"events/connection/PlayerLoginSuccess/","title":"PlayerLoginSuccess Event","text":""},{"location":"events/connection/PlayerLoginSuccess/#description","title":"Description","text":"<p>This event is fired when the player successfully logs in to the game server. It signifies that the player's login attempt was successful and that the game session can now begin. This event is crucial for initiating any post-login processes, such as loading player data or transitioning to the game interface.</p>"},{"location":"events/connection/PlayerLoginSuccess/#parameters","title":"Parameters","text":"<ul> <li><code>IdentificationSuccessMessage</code>: The message received from the server upon successful identification. This message typically contains critical information regarding the player's account, such as privileges, subscription details, and other account-specific data.</li> </ul>"},{"location":"events/connection/PlayerLoginSuccess/#example-usage","title":"Example Usage","text":"<pre><code>def on_player_login_success(event, ismsg):\n    print(f\"Login successful for account: {ismsg.login}\")\n    # Additional logic to handle successful login, such as fetching player data\n\nKernelEventsManager().on(KernelEvent.PlayerLoginSuccess, on_player_login_success)\n</code></pre>"},{"location":"events/connection/ReloginToken/","title":"ReloginToken Event","text":""},{"location":"events/connection/ReloginToken/#description","title":"Description","text":"<p>This event is sent when a relogin token is generated, often as part of a reauthentication process.</p>"},{"location":"events/connection/ReloginToken/#parameters","title":"Parameters","text":"<ul> <li><code>validToken</code>: Indicates whether the token is valid.</li> <li><code>token</code>: The relogin token.</li> </ul>"},{"location":"events/connection/ReloginToken/#example-usage","title":"Example Usage","text":"<pre><code>def on_relogin_token(event, validToken, token):\n    if validToken:\n        print(f\"Received valid relogin token: {token}\")\n    else:\n        print(\"Received invalid relogin token.\")\n\nKernelEventsManager().on(KernelEvent.ReloginToken, on_relogin_token)\n</code></pre>"},{"location":"events/exchange/ExchangeObjectModified/","title":"ExchangeObjectModified Event","text":""},{"location":"events/exchange/ExchangeObjectModified/#description","title":"Description","text":"<p>This event is triggered when an object in the exchange is modified.</p>"},{"location":"events/exchange/ExchangeObjectModified/#parameters","title":"Parameters","text":"<ul> <li><code>iwModified</code>: The modified item wrapper.</li> <li><code>remote</code>: Indicates if the modification was made by the remote party.</li> </ul>"},{"location":"events/exchange/ExchangeObjectModified/#example-usage","title":"Example Usage","text":"<pre><code>def on_exchange_object_modified(event, iwModified, remote):\n    if remote:\n        print(f\"Remote party modified item: {iwModified}\")\n    else:\n        print(f\"Local modification detected: {iwModified}\")\n</code></pre>"},{"location":"events/job/JobExperienceUpdate/","title":"Job Experience Update Event","text":""},{"location":"events/job/JobExperienceUpdate/#description","title":"Description","text":"<p>This event is fired in the JobsFrame when a job gains experience.</p>"},{"location":"events/job/JobExperienceUpdate/#parameters","title":"Parameters","text":"<ul> <li><code>oldJobXp</code>: The previous job experience value.</li> <li><code>jobExp</code>: An instance of <code>JobExperience</code> containing the job ID and the gained experience details.</li> </ul>"},{"location":"events/job/JobExperienceUpdate/#example-usage","title":"Example Usage","text":"<pre><code>KernelEventsManager().on(KernelEvent.JobExperienceUpdate, self.onJobExperience)\ndef onJobExperience(self, event, oldJobXp, jobExp):\n    Logger().info(f\"Job {jobExp.jobId} has gained {jobExp.jobXP} xp\")\n</code></pre>"},{"location":"events/social/AlignmentRankUpdate/","title":"AlignmentRankUpdate Event","text":""},{"location":"events/social/AlignmentRankUpdate/#description","title":"Description","text":"<p>Fired when there's an update to a character's alignment rank.</p>"},{"location":"events/social/AlignmentRankUpdate/#parameters","title":"Parameters","text":"<ul> <li><code>alignmentRank</code>: The new alignment rank.</li> </ul>"},{"location":"events/social/AlignmentRankUpdate/#example-usage","title":"Example Usage","text":"<pre><code>def on_alignment_rank_update(event, alignmentRank):\n    print(f\"Alignment rank updated to: {alignmentRank}\")\n\nKernelEventsManager().on(KernelEvent.AlignmentRankUpdate, on_alignment_rank_update)\n</code></pre>"},{"location":"events/social/UpdateWarEffortHook/","title":"UpdateWarEffortHook Event","text":""},{"location":"events/social/UpdateWarEffortHook/#description","title":"Description","text":"<p>Indicates an update to the war effort, typically with no parameters sent.</p>"},{"location":"events/social/UpdateWarEffortHook/#example-usage","title":"Example Usage","text":"<pre><code>def on_update_war_effort(event):\n    print(\"War effort has been updated.\")\n\nKernelEventsManager().on(KernelEvent.UpdateWarEffortHook, on_update_war_effort)\n</code></pre>"}]}